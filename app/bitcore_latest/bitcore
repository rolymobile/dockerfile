#!/usr/local/bin/node
var bitcore = require('bitcore');
var networks = bitcore.Networks.livenet;

var cmd = process.argv[2];
var result = {
	'success' : false,
};

try{
	switch(cmd){
		case 'create_private_key':
			create_private_key();
			break;
		case 'create_address':
			var arg_start_idx = 3
			if(process.argv[arg_start_idx] == '-t'){
				networks = bitcore.Networks.testnet;
				arg_start_idx = 4;
			}
			var private_key = process.argv[arg_start_idx] ;
			if (private_key == undefined)
				throw new Error('without private key');
			create_address(private_key);
			break;
		case 'create_multisign_address':
			var arg_start_idx = 3
			if(process.argv[arg_start_idx] == '-t'){
				networks = bitcore.Networks.testnet;
				arg_start_idx = 4;
			}
			if(process.argv[arg_start_idx] == undefined || process.argv[arg_start_idx + 1] == undefined)
				throw new Error('Least two private key');
			var threshold = parseInt(process.argv[process.argv.length - 1]);
			if(typeof parseInt(threshold) != 'number')
				throw new Error('without threshold');
			var private_keys = process.argv.slice(arg_start_idx, process.argv.length - 1);
			if(private_keys.length < 2)
				throw new Error('without private keys');
			create_multisign_address(private_keys, threshold);
			break;
		default:
			throw new Error('<command> <arg1> <arg2> ...');
	}
}catch(err){
	fail_output(err);
}

function create_private_key () {
	success_output(new bitcore.PrivateKey().toWIF());
}

function create_address (private_key){
	success_output(new bitcore.PrivateKey(private_key,  networks).toAddress().toString());
}

function create_multisign_address (private_keys, threshold) {
	var private_keys_obj = Array();
	for (var i = 0; i < private_keys.length; i++) {
		private_keys_obj[i] = new bitcore.PrivateKey(private_keys[i]);
	};
	success_output(new bitcore.Address.createMultisig(private_keys_obj, threshold, networks).toString());
}

function success_output(data){
	result['success'] = true;
	result['data'] = data;
	console.log(JSON.stringify(result));
}

function fail_output(message){
	result['data'] = null;
	result['message'] = message.toString();
	console.log(JSON.stringify(result));
}